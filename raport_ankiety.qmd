---
format:
  pdf:
    number-sections: true
toc: true
lang: pl
execute:
  echo: true
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
---

# Część 1

## Zadanie 1

W pewnej dużej firmie technologicznej przeprowadzono ankietę mającą na
celu ocenę skuteczności programów szkoleniowych dla pracowników. Wzięło
w niej udział 200 losowo wybranych osób (losowanie proste ze
zwracaniem).

### Zadanie 1.1

Wczytamy dane i sprawdzimy ich rozmiar.

```{r, echo = FALSE, warning = FALSE, message = FALSE}
library(tidyverse)
library(readr)
library(dplyr)
ankieta <- read.csv("ankieta.csv", sep=";", fileEncoding = "Latin2")
dim(ankieta)
```

Dane zawierają 200 wierszy oraz 8 kolumn.

Sprawdzamy typy zmiennych.

```{r, echo = FALSE, warning = FALSE, message = FALSE}
#view(ankieta)
sapply(ankieta, class)

```

Wszystkie zmienne o typie *character* przekształcamy na typ *factor*.

```{r, echo = FALSE, warning = FALSE}

char_columns <- sapply(ankieta, is.character)
ankieta[ , char_columns] <- lapply(ankieta[ , char_columns], 
                                as.factor)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
#| echo: false 


cat("Liczba wartości brakujących wynosi:", sum(is.na(ankieta)), "\n")
```

Sprawdzamy, czy typy zmiennych zostały prawidłowo rozpoznane.

1.  Zmienne ilościowe (typ numeric)

```{r, echo = FALSE, warning = FALSE, message = FALSE}
#| echo: false 

ilosciowe <- which(sapply(ankieta, is.numeric))
liczba_ilosciowych <- length(ilosciowe)
ilosciowe
```

2.  Zmienne jakościowe (typ factor)

```{r, echo = FALSE, warning = FALSE, message = FALSE}
#| echo: false 

factors <- which(sapply(ankieta, is.factor))
liczba_jakosciowych <- length(factors)
factors

```

### Zadanie 1.2

Utwórz zmienną WIEK_KAT przeprowadzając kategoryzacją zmiennej WIEK
korzystając z nastąpujących przedziałów: do 35 lat, między 36 a 45 lat,
między 46 a 55 lat, powyżej 55 lat.

```{r, echo = FALSE, warning = FALSE, message = FALSE}

ankieta$WIEK_KAT <- cut(ankieta$WIEK, breaks = c(-Inf,35,45,55,Inf), 
                                      labels = c("<35", "36-40", "46-55", ">55"), 
                        right= TRUE)
attach(ankieta)
```

### Zadanie 1.3

Sporządź tablice liczności dla zmiennych: DZIAŁ, STAŻ, CZY_KIER, PŁEĆ,
WIEK_KAT. Sformułuj wnioski.

```{r, echo = FALSE, warning = FALSE}
table(DZIAŁ)
table(STAŻ)
table(CZY_KIER)
table(PŁEĆ)
table(WIEK_KAT)
```

Na podstawie tabel liczności możemy zauważyć, że:

-   W firmie prawie połowa pracowników jest zatrudniona w dziale
    **"PD"** (Dział Produktowy). Drugi największy dział to "MK"
    (Marketing), następnie "HR" (Dział zasobów ludzkich). Najmniej
    pracowników jest zatrudnionych w dziale "IT".

<!-- -->

-   Najwięcej osób pracuje w firmie między jednym a trzema latami. Mało
    osób ma staż ponad 3 lata.

-   W firmie 27 osób ma stanowisko kierownicze (zdecydowana mniejszość)

-   Większość pracowników to **mężczyźni**.

-   Ponad połowa pracowników jest w wieku **36-40 lat**.

### Zadanie 1.4

Sporządź wykresy kołowe oraz wykresy słupkowe dla zmiennych: PYT_1 oraz
PYT_2. Sformułuj wnioski.

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
library(ggplot2)

#pie(table(PYT_1))

ggplot(ankieta, aes(x="", fill = factor(PYT_1))) +
  geom_bar(width = 1) + 
  coord_polar(theta = "y") + 
  labs(fill = "PYT_1", title = "Rozkład odpowiedzi na pytanie 1") +
  theme_minimal()

ggplot(ankieta, aes(x= factor(PYT_1))) +
  geom_bar(fill = 'darkseagreen') + 
  labs(x = "PYT_1", y = "Liczba odp", title = 'Rozkład odpowiedzi na pytanie 1') +
  theme_minimal()
```

**Pytanie 1** brzmiało: "Jak bardzo zgadzasz się ze stwierdzeniem, że
firma zapewnia odpowiednie wsparcie i materiały umożliwiające skuteczne
wykorzystanie w praktyce wiedzy zdobytej w trakcie szkoleń?" większość
ankietowanych odpowiedziała 1 - "Zgadzam się" lub 2 - "Zdecydowanie się
zgadzam". Prawie 1/4 osób nie ma zdania na ten temat. Możemy więc
wnioskować, że więszość firmy jest zadowolona z przeprowadzanych
szkoleń.

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
#pie(table(PYT_2))

ggplot(ankieta, aes(x="", fill = factor(PYT_2))) +
  geom_bar(width = 1) + 
  coord_polar(theta = "y") + 
  labs(fill = "PYT_2", title = "Rozkład odpowiedzi na pytanie 2") +
  theme_minimal()

ggplot(ankieta, aes(x= factor(PYT_2))) +
  geom_bar(fill = 'darkseagreen') + 
  labs(x = "PYT_2", y = "Liczba odp", title = 'Rozkład odpowiedzi na pytanie 2') +
  theme_minimal()
```

Na **pytanie 2**, o treści "Jak bardzo zgadzasz się ze stwierdzeniem, że
firma oferuje szkolenia dostosowane do twoich potrzeb, wspierając twój
rozwój zawodowy i szanse na awans?" nieco ponad połowa osób
odpowiedziała "Zdecydowanie się zgadzam", jednak prawie wszyscy inni
pracownicy dali odpowiedź "Nie zgadzam się" lub "Zdecydowanie się nie
zgadzam", z przewagą tych drugich. Na to pytanie pracownicy udzielili
bardzo skrajnych odpowiedzi. Pomimo zadowolenia połowy pracowników,
warto zbadać ten temat głębiej i przeprowadzić szkolenia dla tych,
którzy nie czują się odpowiednio wspierani przez firmę.

### Zadanie 1.5

Sporządź tablice wielodzielcze dla par zmiennych: PYT_1 i DZIAŁ, PYT_1 i
STAŻ, PYT_1 i CZY_KIER, PYT_1 i PŁEĆ oraz PYT_1 i WIEK_KAT. Sformułuj
wnioski.

```{r, echo = FALSE, warning = FALSE}
table(PYT_1, DZIAŁ)
table(PYT_1, STAŻ)
table(PYT_1, CZY_KIER)
table(PYT_1, PŁEĆ)
table(PYT_1, WIEK_KAT)

```

**Wnioski** 

-   Dział:

    -   najwięcej osób niezgadzających się z podanym stwierdzeniem jest w dziale PD ale to
        największy dział,

    -   IT wydaje się być w większości zadowolony z przeprowadzanych szkoleń.

-   Staż:

    -   dla osób z niższym stażem około połowa osób zgadza się z podanym stwierdzeniem,
        reszta nie ma zdania lub się nie zgadza.

    -   dla osob ze stażem miedzy 1 a 3 lata mamy bardzo dużą grupę osób
        zgadzających się z podanym stwierdzeniem, jednak całkiem sporo osób zaznaczyło opcję "nie
        mam zdania".

-   Kierownictwo

    -   około 1/4 kierowników jest niezadowolona przeprowadzanych szkoleń.

    -   Dla nie-kierowników odpowiedzi rozkładają się bardziej w
        kierunku pozytywnym.

-   Płeć:

    -   kobiety są bardziej zadowolone (procentowo) z wsparcia i możliwości oferowanych przez szkolenia.

-   Wiek:

    -   największy odsetek niezadowolonych osób jest wśród najmłodszych
        pracowników a najmniejszy w grupie 46-55 lat.

### Zadanie 1.6

Sporządź tablicę wielodzielczą dla pary zmiennych: PYT_2 i PYT_3.
Sformułuj wnioski.

```{r, echo = FALSE, warning = FALSE}
table(PYT_2, PYT_3)
```

**Wnioski**

Duże grupy osób zostały przy swojej silnej opini (-2 i 2). Sumarycznie
około 15% głosów zmieniono na bardziej pozytywne, jednak w ponad 10%
przypadków opinia zmieniła się na gorszą. Sugeruje to, że część osób
odczuła pozytywne skutki szkoleń, jednak nadal pozostaje grupa osób,
którym one nie pomogły, a nawet zaszkodziły.

### Zadanie 1.7

Utwórz zmienną CZY_ZADOW na podstawie zmiennej PYT_2 łącząc kategorie
"nie zgadzam się" i "zdecydowanie się nie zgadzam" oraz "zgadzam się" i
"zdecydowanie się zgadzam".

```{r, echo = FALSE, warning = FALSE}
ankieta <- ankieta %>% 
  mutate(
    CZY_ZADOW = case_when(
      PYT_2 %in% c(-2, -1) ~ "Niezadowolona",
      PYT_2 %in% c(2, 1) ~ "Zadowolona",
      TRUE ~ NA_character_
    )) 
#view(ankieta)
```

### Zadanie 1.8

Sporządź wykresy mozaikowe odpowiadające parom zmiennych: CZY_ZADOW i
DZIAŁ, CZY_ZADOW i STAŻ, CZY_ZADOW i CZY_KIER, CZY_ZADOW i PŁEĆ oraz
CZY_ZADOW i WIEK_KAT. Czy na podstawie uzyskanch wykresów można postawić
pewne hipotezy dotyczące realicji między powyższymi zmiennymi? Spróbuj
sformułować kilka takich hipotez.

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
library(vcd)
library(grid)
MyColors = c('pink', 'lightblue', 'darkseagreen', 'orange')
mosaicplot(table(ankieta$CZY_ZADOW, ankieta$DZIAŁ), color = MyColors, xlab = "zadowolenie", ylab = "dział", main = "zadowolenie z podziałem na działy" )
mosaicplot(table(ankieta$CZY_ZADOW, ankieta$STAŻ), color = MyColors, xlab = "zadowolenie", ylab = "staż", main = "zadowolenie z podziałem na staż" )
mosaicplot(table(ankieta$CZY_ZADOW, ankieta$CZY_KIER), color = MyColors, xlab = "zadowolenie", ylab = "czy kierownik", main = "zadowolenie z podziałem na kierownictwo" )
mosaicplot(table(ankieta$CZY_ZADOW, ankieta$PŁEĆ), color = MyColors, xlab = "zadowolenie", ylab = "płeć", main = "zadowolenie z podziałem na płeć" )
mosaicplot(table(ankieta$CZY_ZADOW, ankieta$WIEK_KAT), color = MyColors, xlab = "zadowolenie", ylab = "wiek", main = "zadowolenie z podziałem na wiek" )
```

Badając odpowiedzi na **pytanie 2**, przy podziale pracowników na
odpowiednie grupy możemy zauważyć:

-   DZIAŁ: widzimy, że dla działu "PD" oraz "MK" więcej jest osób
    niezadowolonych, a w dziale "HR" więcej mamy osób zadowolonych. W
    dziale "IT" jest mniej więcej tyle samo zadowolonych i
    niezadowolonych osób. Widzimy zależność między badanymi zmiennymi.

-   STAŻ: osoby o najmniejszym stażu są w większości niezadowolone, Dla
    grupy 1-3 widzimy zadowolenie większości, a w ostatniej grupie
    odpowiedzi rozkładają się po równo. Moglibyśmy przetestować jeszcze
    raz tę zależność dla bardziej szczegółowego podziału osób według
    długości stażu, teraz widzimy niezbyt silną korelację.

-   CZY_KIER: przy tym podziale nie widać drastycznych nierówności.
    Osoby o stanowisku kierowniczym są delikatnie częściej zadowolone od
    pozostałych. Nie widać jednak silnej zależności między tymi
    zmiennymi.

-   PŁEĆ: wiecej kobiet jest niezadowolonych, a w grupie mężczyzn
    delikatnie przeważają osoby zadowolone. Ponownie nie widać silnej
    zależności.

-   WIEK_KAT: w grupach "36-40" oraz "\>55" przeważają odpowiedzi
    negatywne (niezadowolenie), a w pozostałych - pozytywne. Widzimy
    tutaj pewną nieliniową zależność.

# Część 2

## Zadanie 2

Zilustruj odpowiedzi na pytanie "Jak bardzo zgadzasz się ze
stwierdzeniem, że firma pozwala na (...)?" (zmienna PYT_1) w całej
badanej grupie oraz w podgrupach ze względu na zmienną CZY_KIER. W tym
celu możesz zaproponować własne metody wizualizacji lub zapoznać się z
biblioteką `likert` i dostępnymi tam funkcjami `summary` oraz `plot`
(jeśli korzystarz z R) oraz z bibliotek `Altair` lub `plot-likert`
(jeśli korzystarz z Pythona).

```{r, echo = FALSE, warning = FALSE}
PYT_1 <-  factor(PYT_1, levels = -2:2)
#(PYT_1)
```

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
#ggplot(ankieta, aes(x= factor(PYT_1))) +
#  geom_bar(fill = 'darkseagreen') + 
#  labs(x = "PYT_1", y = "Liczba odp", title = 'słupkowy') +
#  theme_minimal()
```

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
library(likert)

likert_df <- likert(as.data.frame(PYT_1))
likert_df2 <- likert(as.data.frame(PYT_1), grouping = ankieta$CZY_KIER)
#likert_df2

likert.bar.plot(likert_df)
likert.bar.plot(likert_df2)
#summary(PYT_1)
likert.density.plot(likert_df)
#likert.density.plot(likert_df2)

```

Na pierwszym i ostatnim wykresie widzimy przewagę odpowiedzi "1" i "2",
nad pozostałymi "-2", "-1" i "0". Jednak po podzieleniu grupy badanych
ze względu na zmienną CZY_KIER widzimy większe niezodowolenie w grupie
kierowników. Osoby bez stanowisk kierowniczych rzadziej udzielały
negatywnych odpowiedzi i częściej głosowały na opcję "Zdecydowanie się
zgadzam".

## Zadanie 3

Zapoznaj się z funkcją `sample` z biblioteki `stats` (w R) lub z funkcją
`random.choice` z biblioteki numpy (w Pythonie). Przetestuj jej
działanie dla różnych wartości argumentów wejściowych. Następnie wylosuj
próbkę o liczności 10% wszystkich rekordów z pliku "ankieta.csv" w dwóch
wersjach: ze zwracaniem oraz bez zwracania

```{r, echo = TRUE, warning = FALSE}
library(stats)
bez_zwracania <- ankieta[sample(1:nrow(ankieta), size = 0.1*nrow(ankieta), replace = FALSE),]
ze_zwracaniem <- ankieta[sample(1:nrow(ankieta), size = 0.1*nrow(ankieta), replace = TRUE),]
```

## Zadanie 4

Zaproponuj metodę symulowania zmiennych losowych z rozkładu
dwumianowego. Napisz funkcję do generowania realizacji, a następnie
zaprezentuj jej działanie porównujęc wybrane teoretyczne i empiryczne
charakterystyki dla przykładowych wartości paramertów rozkładu: n i p.

```{r, echo = TRUE, warning = FALSE}
symulacja <- function(N,n, p) {
  
  wyniki <- numeric(N)
  
  for(i in 1:N) {
    bernoulli <- rbinom(n = n, size = 1, prob = p)
    wyniki[i] <- sum(bernoulli)
  }
  
  return(wyniki)
}
n <- 200
p <- 0.2
N <- 10000
```

```{r, echo = FALSE, warning = FALSE}


samples_1 <- symulacja(N, n, p)
wartość_oczekiwana_emp <- mean(samples_1)
war_emp <- var(samples_1)

wartość_oczekiwana_teo <- n * p
wariancja_teo <- n * p *(1 - p)

cat("Teoretyczna wartość oczekiwana: ", wartość_oczekiwana_teo, "\n")
cat("Teoretyczna wariancja: ", wariancja_teo, "\n")

cat("empiryczna wartość oczekiwana: ", wartość_oczekiwana_emp, "\n")
cat("empiryczna wariancja: ", war_emp, "\n")


```

## Zadanie 5

Zaproponuj metodę symulowania wektorów losowych z rozkładu
wielomianowego. Napisz funkcję do generowania realizacji, a następnie
zaprezentuj jej działanie porównujęc wybrane teoretyczne i empiryczne
charakterystyki dla przykładowych wartości paramertów rozkładu: n i
**p**.

```{r, echo = TRUE, warning = FALSE}
los_wiel <- function(ps, N){
  k <- length(ps)
  csum = cumsum(ps)
  X <- rep(0, k) 
  for (i in 1:N){
    Z <- runif(1)
    for (j in 1:k){
      if (Z<csum[j]){
      X[j] <- X[j] + 1
      break } 
    }
  }
  return(X/N)
}
```

```{r, echo = FALSE, warning = FALSE}
ps <-  c(0.1, 0.23, 0.47, 0.17, 0.03)
N <- 10000
cat('Podany wektor prowdopodobieństwa:    ', ps)
cat('\nEmpiryczny rozkład prawdopodobieństwa', los_wiel(ps, N))
```

# Część 3 i 4

## Zadanie 6

Napisz funkcję do wyznaczania realizacji przedziału ufności
Cloppera-Pearsona. Niech argumentem wejściowym będzie poziom ufności,
liczba sukcesów i liczba prób lub poziom ufności i wektor danych
(funkcja powinna obsługiwać oba przypadki).

```{r, warning = FALSE}
clopper_pearson <- function(alpha, sukces, n = NULL){
  if(is.null(n)){
    data <-  sukces
    sukces <- sum(data == "1")
    n <- length(data)
  }
  if(sukces == 0){
    p_dol <-  0
  } else{
    p_dol <-  qbeta(alpha, sukces, n-sukces - 1)
  }
  if(sukces == n){
    p_gora <-  1
  } else{
    p_gora <- qbeta(alpha, sukces + 1, n - sukces) 
  }
  return(c(p_dol, p_gora))
}
  
```

## Zadanie 7

Korzystając z funkcji napisanej w zadaniu 6. wyznacz realizacje
przedziałów ufności dla prawdopodobieństwa, że pracownik uważa szkolenia
za przystosowane do swoich potrzeb w pierwszym badanym okresie oraz w
drugim badanym okresie. Skorzystaj ze zmiennych CZY_ZADW oraz CZY_ZADW_2
(utwórz zmienną analogicznie jak w zadaniu 1.7). Przyjmij 1− $\alpha$ =
0.95.

```{r, echo = FALSE, warning = FALSE}
ankieta <- ankieta |>
  mutate(
    CZY_ZADOW2 = case_when(
      PYT_3 %in% c(-2, -1) ~ "Niezadowolona",
      PYT_3 %in% c(2, 1) ~ "Zadowolona",
      PYT_3 %in% c(0)  ~ "-",
    )) 
przedzial <- function(alpha, sukces, n = NULL){
  if(is.null(n)){
    data <-  sukces
    sukces <- sum(data == "Zadowolona")
    n <- length(data)
  }
  if(sukces == 0){
    p_dol <-  0
  } else{
    p_dol <-  qbeta(alpha/2, sukces, n-sukces + 1)
  }
  if(sukces == n){
    p_gora <-  1
  } else{
    p_gora <- qbeta(1-(alpha/2), sukces + 1, n - sukces) 
  }
  return(c(p_dol, p_gora))
}
cat("Przedział dla zmiennej 'CZY_ZADOW': ", przedzial(0.05, ankieta$CZY_ZADOW), "\n")
cat("Przedział dla zmiennej 'CZY_ZADOW2':", przedzial(0.05, ankieta$CZY_ZADOW2), "\n")

```

## Zadanie 8

Zapoznaj się z funkcjami do generowania zmiennych losowych z rozkładu
dwumianowego oraz do wyznaczania przedziałów ufności dla parametru *p*.
Przetestuj ich działanie.

```{r, echo = FALSE, warning = FALSE, message=FALSE}
library(stats)
library(binom)
```
```{r}
rbinom(5, 1000, 0.37) # funkcja z biblioteki stats
binom.confint(x = 2, n = 10, conf.level = 0.95, methods='exact')
```
W przypadku pierwszej funkcji podajemy parametry:

- n: liczbę obserwacji
- size: liczbę prób
- prob: prawdopodobieństwo sukcesu ($p$).

Funkcja zwraca ektor długości n, zawierający wygenerowane liczby sukcesów (od 0 do size), z rozkładu dwumianowego.

W przypadku funkcji `binom.confint`, parametry to: 

- x: liczba sukcesów (może być wektor),
- n: liczba prób (czyli rozmiar próby),
- conf.level: poziom ufności (np. 0.95),
- methods: metoda wyznaczania przedziału ufności, np. "exact", "ac", "asymptotic", "wilson", "prop.test", "bayes", "logit", "cloglog", "probit". Wbudowana opcja to "all".

Jako wynik otrzymujemy `data.frame` z kolumnami:

- method: nazwa metody,
- x: liczba sukcesów,
- n: liczba prób,
- mean: oszacowanie częstości (x/n),
- lower i upper: dolna i górna granica przedziału ufności.

## Zadanie 9
Przeprowadź symulacje, których celem jest porównanie prawdopodobieństwa pokrycia i długości przedziałów ufności Cloppera-Pearsona, Walda i trzeciego dowolnego
 typu zaimplementowanego w wybranej funkcji. Rozważ 1− $\alpha$ = 0.95, rozmiar próby n $\in$
 {30,100,1000} i różne wartości prawdopodobieństwa p. Wyniki umieść na wykresach i sformułuj wnioski, które dla konkretnych danych ułatwią wybór konkretnego typu przedziału ufności.

```{r, echo = FALSE, warning = FALSE}
library(binom)
n_values <- c(30, 100, 1000)
p_values <- seq(0.01, 0.99, by=0.01)
N <- 50
metody <- c('exact', 'asymptotic', 'wilson')
```

```{r, echo = FALSE, warning = FALSE}
simulate_confidence_intervals <- function(metody, n, p_values, alpha = 0.05, N = 500){
  coverage_results <- matrix(NA, nrow = length(metody), ncol = length(p_values))
  length_results <- matrix(NA, nrow = length(metody), ncol = length(p_values))
  
  for (j in 1:length(p_values)) {
    p <- p_values[j]
    
    coverage_ex <- numeric(N)
    coverage_as <- numeric(N)
    coverage_wilson <- numeric(N)
    
    length_ex <- numeric(N)
    length_as <- numeric(N)
    length_wilson <- numeric(N)
    
    for (t in 1:N) {
      x <- rbinom(1, n, p)
      
      exact <- binom.confint(x, n, conf.level = 1 - alpha, method = metody[1])
      as <- binom.confint(x, n, conf.level = 1 - alpha, method = metody[2])
      wilson <- binom.confint(x, n, conf.level = 1 - alpha, method = metody[3])
      
      coverage_ex[t] <- (p >= exact$lower && p <= exact$upper)
      coverage_as[t] <- (p >= as$lower && p <= as$upper)
      coverage_wilson[t] <- (p >= wilson$lower && p <= wilson$upper)
      
      length_ex[t] <- exact$upper - exact$lower
      length_as[t] <- as$upper - as$lower
      length_wilson[t] <- wilson$upper - wilson$lower
    }
    
    coverage_results[1, j] <- mean(coverage_ex)
    length_results[1, j] <- mean(length_ex)
    coverage_results[2, j] <- mean(coverage_as)
    length_results[2, j] <- mean(length_as)
    coverage_results[3, j] <- mean(coverage_wilson)
    length_results[3, j] <- mean(length_wilson)
    
    }
  
  list(coverage = coverage_results, length = length_results)
}

results30 <- simulate_confidence_intervals(metody, 30, p_values, N = N)
results100 <- simulate_confidence_intervals(metody, 100, p_values, N = N)
results1000 <- simulate_confidence_intervals(metody, 1000, p_values, N = N)
```

```{r, echo = FALSE, warning = FALSE}
my_colors <- c('darkseagreen', 'lightblue', 'hotpink')
plotowanie <- function(p_values, results, tit1, tit2){
    plot(p_values, results[1,], type = "l", col = my_colors[1], lwd = 2,
     xlab = 'p', ylab = tit2, , ylim = c(0, max(results)),
     main = tit1)
lines(p_values, results[2,], col = my_colors[2], lwd = 2)
lines(p_values, results[3,], col = my_colors[3], lwd = 2)
legend("bottomright", legend = c("ex", "as", "wilson"),
       col = my_colors, lwd = 2)
if (grepl("Prawdopodobieństwo pokrycia", tit1)) {
abline(h = 0.95, col = "black", lwd = 2, lty = 2)
}}


```

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
plotowanie(p_values, results30$coverage, "Prawdopodobieństwo pokrycia dla n = 30", "Prawdopodobieństwo pokrycia")
plotowanie(p_values, results100$coverage, "Prawdopodobieństwo pokrycia dla n = 100", "Prawdopodobieństwo pokrycia")
plotowanie(p_values, results1000$coverage, "Prawdopodobieństwo pokrycia dla n = 1000", "Prawdopodobieństwo pokrycia")

```

```{r, dev="cairo_pdf", echo = FALSE, warning = FALSE}
tit2 = 'Długość przedziału'
plotowanie(p_values, results30$length, "Długość przedziału dla n = 30", tit2)
plotowanie(p_values, results100$length, "Długość przedziału dla n = 100", tit2)
plotowanie(p_values, results1000$length, "Długość przedziału dla n = 1000", tit2)
```
Metoda Walda ("asymptotic") wykazuje najmniejsze prawdopodobieństwo pokrycia, które spada dużo poniżej 0.95 dla małych próbek i p bliskim zera lub jeden. Dla próbki 100 zachowuje sie lepiej, ale nadal prawdopodobieństwo pokrycia dla p bliskiego 0 i 1 mocno spada. Najlepsza w tym porównaniu wypada metoda C-P ("exact") która dla dwóch mniejszych próbek daje najwyższe prawdopodobieństwo pokrycia. Dla największej próbki, n=1000 wszystkie metody radzą sobie na podobnym poziomie. 

Patrząc na długości przedziałów metoda C-P wypada najgorzej - dla każdego z badanych n  przedziały wychodzą najdłuższe. Metoda Walda daje nam krótsze przedziały, jednak dzieje się to kosztem pokrycia - najkrótsze przedziały pojawiają się tam gdzie prawdopodobieństwo jest najniższe. Dobrym kompromisem między pokryciem a długością przedziału okazuje się metoda Wilsona - daje nam najkrótsze przedziały przy przyzwoitym prawdopodobieństwie pokrycia.

# Część 5

## Zadanie 10
Zapoznaj się z funkcjami służącymi do wykonania testu dokładnego oraz asympotycznego weryfikującego hipotezę zerową dotyczącą prawodopodobieństwa sukcesu
 z rozkładu dwumianowego. W pakiecie R możesz skorzystać z `binom.test` oraz `prop.test`
 z biblioteki `stats`, nastomiast w Pythonie użyj `stats.binomtest` z biblioteki `scipy` oraz
 `stats.proportion.proportions_ztest` z biblioteki `statsmodels`. Przetestuj działanie funkcji.


```{r}
#TEST DOKŁADNY

#liczba prób daje 100, liczbe sukcesów 50
binom.test(70, 100, p = 0.5, alternative = "two.sided")

#TEST ASYMPTOTTYCZNY 
prop.test(70, 100, p = 0.5, alternative = "two.sided", correct = FALSE)

```

Binomal.test-\> p-wartosc mniejsza niż poziom istotnosci. Wartość
p-wartosc mała, więc możemy odrzucić hipoteze zerową. Test pokazuje, że
prawdopodobieństwo sukcesu nie wynosi 0.5 i jest istotnie wyższe,
ponieważ wynosi około 0.7. Przedział ufności na poziomie 95% dla
prawdopodobieństwa sukcesu wynosi od 0.6002 do 0.7876.

Prop.test -\> p-wartość znacznie mniejsza niż poziom istotności 0.05,
więc możemy odrzucić hipoteze zerową. Przedział ufności dla
prawdopodobieństwa sukcesu mieści się w przedziale 0.6042 do 0.7811, co
wskazuje, że prawdopodobieństwo sukcesu jest wyższe niż 0.5.

PODOBIEŃSTWA

Oba testy prowadzą do odrzucenia hipotezy zerowej, a prawdopodobieństwo
sukcesu jest istotnie różne od 0.5. W obu testach podobnie bo około 0.7.

RÓŻNICE

test dokładny wykorzystuje pełny rozkład dwumianowy, podczas gdy test
asymptotyczny stosuje przybliżenie normalne.

## Zadanie 11

Dla danych z pliku "ankieta.csv" korzystając z funkcji z zadania 10.,
przyjmując 1− $\alpha$ =0.95, zweryfikuj następujące hipotezy i sformułuj
wnioski 

### Zadanie 11.1 
Prawdopodobieństwo, że w firmie pracuje kobieta wynosi
0.5

```{r, warning = FALSE, echo = FALSE}
x <- sum(ankieta$PŁEĆ == 'K')
n <- dim(ankieta)[1]
p <- 0.5
alt <- 'two.sided'
binom.test(x,n,p=0.5, alternative = alt, conf.level = 0.95)
```

P-wartość mniejsze niż $\alpha$, czyli odrzucamy hipotezę zerową na rzecz
hipotezy alternatywnej.

### Zadanie 11.2

```{r, echo =FALSE}
x <- sum(ankieta$CZY_ZADOW == 'Zadowolona')
p <- 0.7
alt <- 'greater'
binom.test(x,n,p=p, alternative = alt, conf.level = 0.95)
```

P-wartość jest większa niż $\alpha$, więc nie ma podstaw do odrzucenia
hipotezy zerowej.

### Zadanie 11.3

```{r, dev='cairo_pdf', echo = FALSE}
kkier <- sum(ankieta$PŁEĆ == 'K' & ankieta$CZY_KIER == 'Tak')
k <- sum(ankieta$PŁEĆ == 'K')
mkier <- sum(ankieta$PŁEĆ == 'M' & ankieta$CZY_KIER == 'Tak')
m <- sum(ankieta$PŁEĆ == 'M')
#kkier
#mkier
x <- matrix(c(kkier,mkier,k-kkier,m-mkier), nrow =2, byrow = FALSE)
prop.test(x, alternative = 'two.sided')
```

P-wartość jest większa niż $\alpha$, więc nie ma podstaw do odrzucenia
hipotezy zerowej.

### Zadanie 11.4

```{r, echo= FALSE}
kp <- sum(sum(ankieta$PŁEĆ == 'K' & ankieta$CZY_ZADOW == 'Zadowolona'))
mp <- sum(sum(ankieta$PŁEĆ == 'M' & ankieta$CZY_ZADOW == 'Zadowolona'))
x <- matrix(c(kp, mp, k-kp,m-mp), nrow =2, byrow = FALSE)
prop.test(x, alternative = 'two.sided')
```

P-wartość jest większa niż $\alpha$, więc nie ma podstaw do odrzucenia
hipotezy zerowej.

### Zadanie 11.5

```{r, echo = FALSE}
khr <- sum(ankieta$PŁEĆ == 'K' & ankieta$DZIAŁ == 'HR')
mhr <- sum(ankieta$PŁEĆ == 'M' & ankieta$DZIAŁ == 'HR')
x <- matrix(c(khr, mhr, k-khr,m-mhr), nrow =2, byrow = FALSE)
prop.test(x, alternative = 'greater')
```

P-wartość jest większa niż $\alpha$, więc nie ma podstaw do odrzucenia
hipotezy zerowej.

## Zadanie 12

W tym zadaniu naszym celem było wyznaczenie mocy testu dla dwóch różnych
testów statystycznych: testu dokładnego (testu dwumianowego) oraz testu
asymptotycznego (testu proporcji). Zadanie polegało na przeprowadzeniu
symulacji, w której weryfikowaliśmy hipotezę zerową ($H_0: p = 0.9$) przeciwko hipotezie
alternatywnej ($H_1: p \neq 0.9$). Wyniki symulacji zostały przedstawione w postaci wykresów
przedstawiających moc testu dla każdego rozmiaru próby oraz każdego
testu.

```{r, echo = FALSE, warning = FALSE}
p_0 <- 0.9
n_wartosci <- c(10, 30, 50, 100)  
p_alt <- seq(0.01, 0.99, by = 0.01)   

symulacja_mocy <- function(p_0, p_alt, n, alpha = 0.05, iteracje = 500) {
  results <- matrix(0, nrow = 2, ncol = length(p_alt))
  
  for (i in 1:iteracje) {
    for(k in 1:length(p_alt)){
      sukcesy <- rbinom(1, n, p_alt[k])
   
      wynik_binom <- binom.test(sukcesy, n, p = p_0, alternative = "two.sided")
      if (wynik_binom$p.value < alpha) {
        results[1,k] <- results[1,k] + 1
      }
      
      wynik_prop <- prop.test(sukcesy, n, p = p_0, alternative = "two.sided", correct = FALSE)
      if (wynik_prop$p.value < alpha) {
        results[2,k] <- results[2,k] + 1
      }
    }
    
  }
  
  results <- results/iteracje
  
  return(results)
}

```

```{r, , dev="cairo_pdf", echo = FALSE, warning = FALSE, message = FALSE}
wyniki10 <- data.frame(symulacja_mocy(p_0, p_alt, 10, alpha = 0.05, iteracje = 500))
wyniki50 <- data.frame(symulacja_mocy(p_0, p_alt, 50, alpha = 0.05, iteracje = 500))
wyniki100 <- data.frame(symulacja_mocy(p_0, p_alt, 100, alpha = 0.05, iteracje = 500))
wyniki1000 <- data.frame(symulacja_mocy(p_0, p_alt, 1000, alpha = 0.05, iteracje = 500))
```

```{r}
plotly <- function(wyniki, n){
  plot(p_alt, wyniki[1,], type = "l", col = my_colors[1], lwd = 2,
     xlab = 'p', ylab = 'moc testu', main = paste('Moc testu dla próbki n =',n))
lines(p_alt, wyniki[2,], col = my_colors[3], lwd = 2)
legend("bottomleft", legend = c("dokładny", "asymptotyczny"),
       col = my_colors[c(1,3)], lwd = 2)
}
```

```{r, dev='cairo_pdf', echo = FALSE, message=FALSE, warning=FALSE}
plotly(wyniki10, 10)
plotly(wyniki50, 50)
plotly(wyniki100, 100)
plotly(wyniki1000, 1000)
```

**Wnioski**

\- Małe próby (n = 10): Moc testów jest stosunkowo niska, zwłaszcza dla
wartości p bliskich 0.9, co wynika z dużej niepewności przy małej
liczbie obserwacji. Test dokładny wykazuje szybszy spadek mocy w miarę
oddalania się p od 0.9, test asymptotyczny w tym przypadku wykazuje
mniejszy spadek mocy, co sprawia, że jest bardziej stabilny.

\- Moc testów rośnie w miarę zwiększania rozmiaru próby.

\- W przypadku dużych prób oba testy wykazują bardzo wysoką moc,
szczególnie dla wartości p znacznie różniących się od 0.9,

\- Dla wartości p bliskich 0.9 (hipoteza zerowa), moc testów jest
niższa, ponieważ trudno jest wykryć różnicę między hipotezą zerową a
alternatywną, gdy wartości p są bardzo zbliżone do siebie,

\- Dla wartości p oddalonych od 0.9, moc testów gwałtownie rośnie, co
wskazuje na większą skuteczność testów w wykrywaniu różnic w takich
przypadkach,
